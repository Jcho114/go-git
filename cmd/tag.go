package cmd

import (
	"os"

	"github.com/Jcho114/go-git/obj"
	"github.com/Jcho114/go-git/ref"
	"github.com/Jcho114/go-git/repo"
	"github.com/spf13/cobra"
)

var asobject bool

func init() {
	showRefCmd.Flags().BoolVar(&asobject, "a", false, "to create tag object")
	rootCmd.AddCommand(tagCmd)
}

var tagCmd = &cobra.Command{
	Use:   "tag",
	Short: "a very attempt at creating tags",
	Long:  "a very very bad attempt at creating tags from scratch",
	Args:  cobra.MatchAll(cobra.MaximumNArgs(2), cobra.OnlyValidArgs),
	RunE:  runTag,
}

func runTag(cmd *cobra.Command, args []string) error {
	tagname := ""
	if len(args) > 0 {
		tagname = args[0]
	}

	var objname string
	if len(args) == 2 {
		objname = args[1]
	} else {
		objname = "HEAD"
	}

	repository, err := repo.FindRepository(".", true)
	if err != nil {
		return err
	}

	if tagname == "" {
		refmap, err := ref.RefList(repository, "")
		if err != nil {
			return err
		}
		err = ref.RefShow(refmap, "refs", false)
		if err != nil {
			return err
		}
	} else {
		err := tagCreate(repository, tagname, objname, asobject)
		if err != nil {
			return err
		}
	}

	return nil
}

func tagCreate(repository *repo.Repository, tagname string, ref string, asobject bool) error {
	sha := obj.ObjectFind(repository, ref, "any", true)

	if asobject {
		tag := obj.NewTag(nil)
		tag.Kvlm["object"] = []string{sha}
		tag.Kvlm["type"] = []string{ref}
		tag.Kvlm["tag"] = []string{tagname}
		tag.Kvlm["tagger"] = []string{"go-git <go-git@test.com>"}
		tag.Kvlm[""] = []string{"a tag generated by go-git"}
		tagid, err := obj.ObjectWrite(repository, tag)
		if err != nil {
			return err
		}
		err = os.WriteFile("tags/"+tagname, []byte(tagid), 0644)
		if err != nil {
			return err
		}
	} else {
		err := os.WriteFile("tags/"+tagname, []byte(ref), 0644)
		if err != nil {
			return err
		}
	}

	return nil
}
